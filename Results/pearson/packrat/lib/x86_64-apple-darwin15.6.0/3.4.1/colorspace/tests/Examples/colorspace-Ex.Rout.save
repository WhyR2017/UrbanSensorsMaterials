
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "colorspace"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('colorspace')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("HLS")
> ### * HLS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HLS
> ### Title: Create HLS Colors
> ### Aliases: HLS
> ### Keywords: color
> 
> ### ** Examples
> 
> # A rainbow of full-intensity hues
> HLS(seq(0, 360, length=13)[-13], 0.5, 1)
        H   L S
 [1,]   0 0.5 1
 [2,]  30 0.5 1
 [3,]  60 0.5 1
 [4,]  90 0.5 1
 [5,] 120 0.5 1
 [6,] 150 0.5 1
 [7,] 180 0.5 1
 [8,] 210 0.5 1
 [9,] 240 0.5 1
[10,] 270 0.5 1
[11,] 300 0.5 1
[12,] 330 0.5 1
> 
> 
> 
> cleanEx()
> nameEx("HSV")
> ### * HSV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HSV
> ### Title: Create HSV Colors
> ### Aliases: HSV
> ### Keywords: color
> 
> ### ** Examples
> 
> # A rainbow of full-intensity hues
> HSV(seq(0, 360, length=13)[-13], 1, 1)
        H S V
 [1,]   0 1 1
 [2,]  30 1 1
 [3,]  60 1 1
 [4,]  90 1 1
 [5,] 120 1 1
 [6,] 150 1 1
 [7,] 180 1 1
 [8,] 210 1 1
 [9,] 240 1 1
[10,] 270 1 1
[11,] 300 1 1
[12,] 330 1 1
> 
> 
> 
> cleanEx()
> nameEx("LAB")
> ### * LAB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LAB
> ### Title: Create LAB Colors
> ### Aliases: LAB
> ### Keywords: color
> 
> ### ** Examples
> 
> ## Show the LAB space
> set.seed(1)
> x <- RGB(runif(1000), runif(1000), runif(1000))
> y <- as(x, "LAB")
> head(x)
             R         G        B
[1,] 0.2655087 0.5308088 0.871805
> head(y)
            L         A         B
[1,] 76.00763 -4.987872 -28.84153
> plot(y)
> 
> 
> 
> cleanEx()
> nameEx("LUV")
> ### * LUV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LUV
> ### Title: Create LUV Colors
> ### Aliases: LUV
> ### Keywords: color
> 
> ### ** Examples
> 
> ## Show the LUV space
> set.seed(1)
> x <- RGB(runif(1000), runif(1000), runif(1000))
> y <- as(x, "LUV")
> head(x)
             R         G        B
[1,] 0.2655087 0.5308088 0.871805
> head(y)
            L        U        V
[1,] 76.00763 -25.7427 -45.3886
> plot(y)
> 
> 
> 
> cleanEx()
> nameEx("RGB")
> ### * RGB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RGB
> ### Title: Create RGB Colors
> ### Aliases: RGB
> ### Keywords: color
> 
> ### ** Examples
> 
> # Create a random set of colors
> set.seed(1)
> RGB(R = runif(20), G = runif(20), B = runif(20))
               R          G          B
 [1,] 0.26550866 0.93470523 0.82094629
 [2,] 0.37212390 0.21214252 0.64706019
 [3,] 0.57285336 0.65167377 0.78293276
 [4,] 0.90820779 0.12555510 0.55303631
 [5,] 0.20168193 0.26722067 0.52971958
 [6,] 0.89838968 0.38611409 0.78935623
 [7,] 0.94467527 0.01339033 0.02333120
 [8,] 0.66079779 0.38238796 0.47723007
 [9,] 0.62911404 0.86969085 0.73231374
[10,] 0.06178627 0.34034900 0.69273156
[11,] 0.20597457 0.48208012 0.47761962
[12,] 0.17655675 0.59956583 0.86120948
[13,] 0.68702285 0.49354131 0.43809711
[14,] 0.38410372 0.18621760 0.24479728
[15,] 0.76984142 0.82737332 0.07067905
[16,] 0.49769924 0.66846674 0.09946616
[17,] 0.71761851 0.79423986 0.31627171
[18,] 0.99190609 0.10794363 0.51863426
[19,] 0.38003518 0.72371095 0.66200508
[20,] 0.77744522 0.41127443 0.40683019
> 
> 
> 
> cleanEx()
> nameEx("USSouthPolygon")
> ### * USSouthPolygon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: USSouthPolygon
> ### Title: Polygon for County Map of US South States: Alabama, Georgia, and
> ###   South Carolina
> ### Aliases: USSouthPolygon
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## generate color palette
> pal <- diverge_hcl(9)
> n <- length(pal)
> 
> ## draw shaded polygons
> plot(0, 0, type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
+   xlim = c(-88.5, -78.6), ylim = c(30.2, 35.2), asp = 1)
> polygon(USSouthPolygon, col = pal[cut(na.omit(USSouthPolygon$z), breaks = 0:n/n)])
> 
> 
> 
> cleanEx()
> nameEx("XYZ")
> ### * XYZ
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: XYZ
> ### Title: Create XYZ Colors
> ### Aliases: XYZ
> ### Keywords: color
> 
> ### ** Examples
> 
> ## Generate white in XYZ space
> XYZ(95.047, 100.000, 108.883)
          X   Y       Z
[1,] 95.047 100 108.883
> 
> 
> 
> cleanEx()
> nameEx("choose_palette")
> ### * choose_palette
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: choose_palette
> ### Title: Graphical User Interface for Choosing HCL Color Palettes
> ### Aliases: choose_palette hclwizard
> ### Keywords: misc
> 
> ### ** Examples
> 
> if(interactive()) {
+ ## Using tcltk GUI
+ ## Analog to: hclwizard(gui="tcltk")
+ pal <- choose_palette()
+ ## Using shiny GUI
+ ## Analog to: choose_palette(gui = "shiny")
+ pal <- hclwizard()
+ 
+ ## use resulting palette function
+ filled.contour(volcano, color.palette = pal, asp = 1)
+ }
> 
> 
> 
> cleanEx()
> nameEx("color-class")
> ### * color-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: color-class
> ### Title: Class "color"
> ### Aliases: color-class RGB-class sRGB-class XYZ-class HSV-class HLS-class
> ###   LAB-class LUV-class polarLAB-class polarLUV-class [,color-method
> ###   coerce,color,RGB-method coerce,color,sRGB-method
> ###   coerce,color,XYZ-method coerce,color,LAB-method
> ###   coerce,color,polarLAB-method coerce,color,HSV-method
> ###   coerce,color,HLS-method coerce,color,LUV-method
> ###   coerce,color,polarLUV-method coords,color-method plot,color-method
> ###   show,color-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> x = RGB(runif(1000),runif(1000),runif(1000))
> plot(as(x, "LUV"))
> 
> 
> 
> cleanEx()
> nameEx("coords")
> ### * coords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coords
> ### Title: Extract the numerical coordinates of a color
> ### Aliases: coords
> ### Keywords: color
> 
> ### ** Examples
> 
> x <- RGB(1, 0, 0)
> coords(as(x, "HSV"))
       H S V
[1,] 360 1 1
> 
> 
> 
> cleanEx()
> nameEx("desaturate")
> ### * desaturate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: desaturate
> ### Title: Desaturate Colors by Chroma Removal in HCL Space
> ### Aliases: desaturate
> ### Keywords: color
> 
> ### ** Examples
> 
> ## rainbow of colors and their desaturated counterparts
> rainbow_hcl(12)
 [1] "#E495A5" "#DB9D85" "#C7A76C" "#ABB065" "#86B875" "#5CBD92" "#39BEB1"
 [8] "#4CB9CC" "#7DB0DD" "#ACA4E2" "#CD99D8" "#E093C3"
> desaturate(rainbow_hcl(12))
 [1] "#ABABAB" "#ABABAB" "#ABABAB" "#ABABAB" "#ABABAB" "#ABABAB" "#ABABAB"
 [8] "#ABABAB" "#ABABAB" "#ABABAB" "#ABABAB" "#ABABAB"
> 
> ## convenience demo function
> wheel <- function(col, radius = 1, ...)
+   pie(rep(1, length(col)), col = col, radius = radius, ...) 
> 
> ## compare base and colorspace palettes
> ## (in color and desaturated)
> par(mar = rep(0, 4), mfrow = c(2, 2))
> ## rainbow color wheel
> wheel(rainbow_hcl(12))
> wheel(rainbow(12))
> wheel(desaturate(rainbow_hcl(12)))
> wheel(desaturate(rainbow(12)))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("hex")
> ### * hex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hex
> ### Title: Convert Colors To Hexadecimal Strings
> ### Aliases: hex
> ### Keywords: color
> 
> ### ** Examples
> 
> hsv = HSV(seq(0, 360, length = 7)[-7], 1, 1)
> hsv
       H S V
[1,]   0 1 1
[2,]  60 1 1
[3,] 120 1 1
[4,] 180 1 1
[5,] 240 1 1
[6,] 300 1 1
> hex(hsv)
[1] "#FF0000" "#FFFF00" "#00FF00" "#00FFFF" "#0000FF" "#FF00FF"
> barplot(rep(1,6), col = hex(hsv))
> 
> 
> 
> cleanEx()
> nameEx("hex2RGB")
> ### * hex2RGB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hex2RGB
> ### Title: Convert Hexadecimal Color Specifications To RGB Objects
> ### Aliases: hex2RGB
> ### Keywords: color
> 
> ### ** Examples
> 
> hex2RGB(c("#FF0000","#00FF00", "#0000FF50"))
     R G B
[1,] 1 0 0
[2,] 0 1 0
[3,] 0 0 1
> 
> 
> 
> cleanEx()
> nameEx("mixcolor")
> ### * mixcolor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mixcolor
> ### Title: Compute the convex combination of two colors
> ### Aliases: mixcolor
> ### Keywords: color
> 
> ### ** Examples
> 
> mixcolor(0.5, RGB(1, 0, 0), RGB(0, 1, 0))
       R   G B
[1,] 0.5 0.5 0
> 
> 
> 
> cleanEx()
> nameEx("polarLAB")
> ### * polarLAB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polarLAB
> ### Title: Create polarLAB Colors
> ### Aliases: polarLAB
> ### Keywords: color
> 
> ### ** Examples
> 
> ## Show the polarLAB space
> set.seed(1)
> x <- RGB(runif(1000), runif(1000), runif(1000))
> y <- as(x, "polarLAB")
> head(x)
             R         G        B
[1,] 0.2655087 0.5308088 0.871805
> head(y)
            L        C        H
[1,] 76.00763 29.26965 260.1883
> plot(y)
> 
> 
> 
> cleanEx()
> nameEx("polarLUV")
> ### * polarLUV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polarLUV
> ### Title: Create polarLUV Colors
> ### Aliases: polarLUV
> ### Keywords: color
> 
> ### ** Examples
> 
> ## Show the polarLUV space
> set.seed(1)
> x <- RGB(runif(1000), runif(1000), runif(1000))
> y <- as(x, "polarLUV")
> head(x)
             R         G        B
[1,] 0.2655087 0.5308088 0.871805
> head(y)
            L        C        H
[1,] 76.00763 52.18057 240.4397
> plot(y)
> 
> 
> 
> cleanEx()
> nameEx("rainbow_hcl")
> ### * rainbow_hcl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rainbow_hcl
> ### Title: HCL and HSV Color Palettes
> ### Aliases: rainbow_hcl diverge_hcl diverge_hsv heat_hcl sequential_hcl
> ###   terrain_hcl
> ### Keywords: color
> 
> ### ** Examples
> 
> ## convenience demo functions
> wheel <- function(col, radius = 1, ...)
+   pie(rep(1, length(col)), col = col, radius = radius, ...) 
> 
> pal <- function(col, border = "light gray")
+ {
+   n <- length(col)
+   plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1), axes = FALSE, xlab = "", ylab = "")
+   rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
+ }
> 
> ## qualitative palette
> wheel(rainbow_hcl(12))
> 
> ## a few useful diverging HCL palettes
> par(mar = rep(0, 4), mfrow = c(4, 1))
> pal(diverge_hcl(7))
> pal(diverge_hcl(7, h = c(246, 40), c = 96, l = c(65, 90)))
> pal(diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)))
> pal(diverge_hcl(7, h = c(180, 70), c = 70, l = c(90, 95)))
> pal(diverge_hcl(7, h = c(180, 330), c = 59, l = c(75, 95)))
> pal(diverge_hcl(7, h = c(128, 330), c = 98, l = c(65, 90)))
> pal(diverge_hcl(7, h = c(255, 330), l = c(40, 90)))
> pal(diverge_hcl(7, c = 100, l = c(50, 90), power = 1))
> 
> ## sequential palettes
> pal(sequential_hcl(12))
> pal(heat_hcl(12, h = c(0, -100), l = c(75, 40), c = c(40, 80), power = 1))
> pal(terrain_hcl(12, c = c(65, 0), l = c(45, 95), power = c(1/3, 1.5)))
> pal(heat_hcl(12, c = c(80, 30), l = c(30, 90), power = c(1/5, 1.5)))
> 
> ## compare base and colorspace palettes
> ## (in color and desaturated)
> par(mar = rep(0, 4), mfrow = c(2, 2))
> ## rainbow color wheel
> wheel(rainbow_hcl(12))
> wheel(rainbow(12))
> wheel(desaturate(rainbow_hcl(12)))
> wheel(desaturate(rainbow(12)))
> 
> ## diverging red-blue colors
> pal(diverge_hsv(7))
> pal(diverge_hcl(7, c = 100, l = c(50, 90)))
> pal(desaturate(diverge_hsv(7)))
> pal(desaturate(diverge_hcl(7, c = 100, l = c(50, 90))))
> 
> ## diverging cyan-magenta colors
> pal(cm.colors(7))
> pal(diverge_hcl(7, h = c(180, 330), c = 59, l = c(75, 95)))
> pal(desaturate(cm.colors(7)))
> pal(desaturate(diverge_hcl(7, h = c(180, 330), c = 59, l = c(75, 95))))
> 
> ## heat colors
> pal(heat.colors(12))
> pal(heat_hcl(12))
> pal(desaturate(heat.colors(12)))
> pal(desaturate(heat_hcl(12)))
> 
> ## terrain colors
> pal(terrain.colors(12))
> pal(terrain_hcl(12))
> pal(desaturate(terrain.colors(12)))
> pal(desaturate(terrain_hcl(12)))
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("readRGB")
> ### * readRGB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readRGB
> ### Title: Read RGB Color Descriptions
> ### Aliases: readRGB
> ### Keywords: color
> 
> ### ** Examples
> 
> ## Not run: 
> ##D rgb <- readRGB("pastel.rgb")
> ##D hsv <- readRGB("pastel.rgb", "HSV")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readhex")
> ### * readhex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readhex
> ### Title: Read Hexadecimal Color Descriptions
> ### Aliases: readhex
> ### Keywords: color
> 
> ### ** Examples
> 
> ## Not run: 
> ##D rgb <- readhex("pastel.txt")
> ##D hsv <- readhex("pastel.txt", "HSV")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sRGB")
> ### * sRGB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sRGB
> ### Title: Create sRGB Colors
> ### Aliases: sRGB
> ### Keywords: color
> 
> ### ** Examples
> 
> # Create a random set of colors
> set.seed(1)
> sRGB(R = runif(20), G = runif(20), B = runif(20))
               R          G          B
 [1,] 0.26550866 0.93470523 0.82094629
 [2,] 0.37212390 0.21214252 0.64706019
 [3,] 0.57285336 0.65167377 0.78293276
 [4,] 0.90820779 0.12555510 0.55303631
 [5,] 0.20168193 0.26722067 0.52971958
 [6,] 0.89838968 0.38611409 0.78935623
 [7,] 0.94467527 0.01339033 0.02333120
 [8,] 0.66079779 0.38238796 0.47723007
 [9,] 0.62911404 0.86969085 0.73231374
[10,] 0.06178627 0.34034900 0.69273156
[11,] 0.20597457 0.48208012 0.47761962
[12,] 0.17655675 0.59956583 0.86120948
[13,] 0.68702285 0.49354131 0.43809711
[14,] 0.38410372 0.18621760 0.24479728
[15,] 0.76984142 0.82737332 0.07067905
[16,] 0.49769924 0.66846674 0.09946616
[17,] 0.71761851 0.79423986 0.31627171
[18,] 0.99190609 0.10794363 0.51863426
[19,] 0.38003518 0.72371095 0.66200508
[20,] 0.77744522 0.41127443 0.40683019
> 
> 
> 
> cleanEx()
> nameEx("specplot")
> ### * specplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: specplot
> ### Title: Color Spectrum Plot
> ### Aliases: specplot
> ### Keywords: misc
> 
> ### ** Examples
> 
> ## spectrum of the (in)famous RGB rainbow palette
> specplot(rainbow(100))
> 
> ## spectrum of HCL-based palettes: qualitative/sequential/diverging
> specplot(rainbow_hcl(100))
> specplot(sequential_hcl(100))
> specplot(diverge_hcl(100))
> 
> ## return computed RGB and HCL coordinates
> res <- specplot(rainbow(10), plot = FALSE)
> print(res)
$RGB
        R   G   B
 [1,] 1.0 0.0 0.0
 [2,] 1.0 0.6 0.0
 [3,] 0.8 1.0 0.0
 [4,] 0.2 1.0 0.0
 [5,] 0.0 1.0 0.4
 [6,] 0.0 1.0 1.0
 [7,] 0.0 0.4 1.0
 [8,] 0.2 0.0 1.0
 [9,] 0.8 0.0 1.0
[10,] 1.0 0.0 0.6

$HCL
              H         C        L
 [1,]  12.17395 179.04076 53.24059
 [2,]  39.43554 109.90223 72.26076
 [3,] 102.90782 109.54965 93.60562
 [4,] 126.52223 133.56847 88.07440
 [5,] 132.97247 118.65166 88.19667
 [6,] 192.16714  72.09794 91.11330
 [7,] 259.85512 127.32455 47.90415
 [8,] 267.22822 132.04235 33.81769
 [9,] 291.97946 133.06241 51.90335
[10,] 346.98811 133.87809 55.65064

$hex
 [1] "#FF0000FF" "#FF9900FF" "#CCFF00FF" "#33FF00FF" "#00FF66FF" "#00FFFFFF"
 [7] "#0066FFFF" "#3300FFFF" "#CC00FFFF" "#FF0099FF"

> 
> 
> 
> cleanEx()
> nameEx("writehex")
> ### * writehex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writehex
> ### Title: Write Hexadecimal Color Descriptions
> ### Aliases: writehex
> ### Keywords: color
> 
> ### ** Examples
> 
> set.seed(1)
> x <- RGB(runif(10), runif(10), runif(10))
> writehex(x, "random.txt")
[1] "random.txt"
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.404 0.032 0.436 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
